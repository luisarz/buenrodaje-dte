<?php

namespace App\Filament\Resources\CreditNotePurchases\Pages;

use Filament\Actions\EditAction;
use Log;
use Filament\Actions\DeleteAction;
use App\Filament\Resources\CreditNotePurchases\CreditNotePurchaseResource;
use App\Filament\Resources\Purchases\PurchaseResource;
use App\Helpers\KardexHelper;
use App\Models\Inventory;
use App\Models\Provider;
use App\Models\PurchaseItem;
use App\Models\SaleItem;
use EightyNine\FilamentPageAlerts\PageAlert;
use Filament\Actions;
use Filament\Actions\Action;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Contracts\Support\Htmlable;
use Livewire\Attributes\On;

class EditCreditNotePurchase extends EditRecord
{
    protected static string $resource = CreditNotePurchaseResource::class;

    protected function getHeaderActions(): array
    {
        return [
//            Actions\DeleteAction::make(),
        ];
    }

    public function getTitle(): string|Htmlable
    {
        return '';// TODO: Change the autogenerated stub
    }

    protected function getFormActions(): array
    {
        return [
            // Acción para finalizar la venta
            Action::make('save')
                ->label('Finalizar Nota de Credito')
                ->color('success')
                ->icon('heroicon-o-check')
                ->requiresConfirmation()
                ->modalHeading('Confirmación')
                ->modalSubheading('¿Estás seguro de que deseas Finalizar esta NC?')
                ->modalButton('Sí, Finalizar Nota')
                ->action(function (EditAction $edit) {
                    $purchase = $this->record; // Obtener el registro de la compra
                    $purchaseItems = PurchaseItem::where('purchase_id', $purchase->id)->get();
                    $provider = Provider::with('pais')->find($purchase->provider_id);
                    $entity = $provider->comercial_name;
                    $pais = $provider->pais->name;

                    foreach ($purchaseItems as $item) {
                        $inventory = Inventory::find($item->inventory_id);

                        // Verifica si el inventario existe
                        if (!$inventory) {
                            Log::error("Inventario no encontrado para el item de compra: {$item->id}");
                            continue; // Si no se encuentra el inventario, continua con el siguiente item
                        }

                        // Actualiza el stock del inventario
                        $newStock = $inventory->stock - $item->quantity;
                        $inventory->update(['stock' => $newStock]);

                        // Crear el Kardex
                        $kardex = KardexHelper::createKardexFromInventory(
                            $inventory->branch_id, // Se pasa solo el valor de branch_id (entero)
                            $purchase->purchase_date, // date
                            'Compra', // operation_type
                            $purchase->id, // operation_id
                            $item->id, // operation_detail_id
                            'Nota de Crédito', // document_type
                            $purchase->document_number, // document_number
                            $entity, // entity
                            $pais, // nationality
                            $inventory->id, // inventory_id
                            $inventory->stock + $item->quantity, // previous_stock
                            0, // stock_in
                            $item->quantity, // stock_out
                            $inventory->stock, // stock_actual
                            $item->quantity * $item->price, // money_in
                            0, // money_out
                            $inventory->stock * $item->price, // money_actual
                            $item->price, // sale_price
                            $inventory->cost_without_taxes // purchase_price
                        );

                        // Verifica si la creación del Kardex fue exitosa
                        if (!$kardex) {
                            Log::error("Error al crear Kardex para el item de compra: {$item->id}");
                        }
                    }

                    // Redirigir después de completar el proceso
                    $this->redirect(static::getResource()::getUrl('index'));

                }),

            // Acción para cancelar la venta
            Action::make('cancelSale')
                ->label('Cancelar Nota')
                ->icon('heroicon-o-no-symbol')
                ->color('danger')
                ->requiresConfirmation()
                ->modalHeading('Confirmación')
                ->modalSubheading('¿Estás seguro de que deseas cancelar esta Nota? Esta acción no se puede deshacer.')
                ->modalButton('Sí, cancelar venta')
                ->action(function (DeleteAction $delete) {


                    // Eliminar la venta y los elementos relacionados
                    PurchaseItem::where('purchase_id', $this->record->id)->delete();
                    $this->record->delete();

                    Notification::make()
                        ->title('Nota cancelada')
                        ->body('La Nota y sus elementos relacionados han sido eliminados con éxito.')
                        ->success()
                        ->send();

                    $this->redirect(static::getResource()::getUrl('index'));
                }),
        ];
    }

    #[On('refreshPurchase')]
    public function refresh(): void
    {
    }





}
