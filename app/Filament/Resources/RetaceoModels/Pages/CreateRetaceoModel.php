<?php

namespace App\Filament\Resources\RetaceoModels\Pages;
use Illuminate\Support\Facades\DB;

use App\Filament\Resources\RetaceoModels\RetaceoModelResource;
use Filament\Actions\Action;
use Filament\Resources\Pages\CreateRecord;
use Illuminate\Contracts\Support\Htmlable;

class CreateRetaceoModel extends CreateRecord
{
    protected static string $resource = RetaceoModelResource::class;

    public function getTitle(): string|Htmlable
    {
        return ''; // TODO: Change the autogenerated stub
    }

    protected static bool $canCreateAnother = false;

    protected function getFormActions(): array
    {
        return [
            Action::make('save')
                ->label('Iniciar Retaceo')
                ->color('success')
                ->icon('heroicon-o-check')
                ->action('create')
                ->before(function (Action $action, array &$data) {
                    $data['operation_type'] = "Order";
                    $data['is_invoiced'] = false;

                })
                ->extraAttributes([
                    'class' => 'alig', // Tailwind para ajustar el margen alinearlo a la derecha

                ]),
            Action::make('recalcular')
                ->label('Recalcular Retaceo')
                ->color('success')
                ->icon('heroicon-o-check')
                ->action('create')
                ->before(function (Action $action, array &$data) {
                    $data['operation_type'] = "Order";
                    $data['is_invoiced'] = false;

                })
                ->extraAttributes([
                    'class' => 'alig', // Tailwind para ajustar el margen alinearlo a la derecha

                ]),
        ];
    }


    protected function afterCreate(): void
    {
        $this->procesarRetaceo();
    }
    private function procesarRetaceo(): void
    {
        DB::transaction(function () {
            $poliza = $this->record->poliza_number;
            $purchases = \App\Models\Purchase::where('poliza_number', $poliza)->get();

            $fob_general      = $this->record->fob;
            $flete_general    = $this->record->flete;
            $seguro_general   = $this->record->seguro;
            $otros_general    = $this->record->otros;
            $cif_general      = $this->record->cif;
            $dai_general      = $this->record->dai;
            $suma_general     = $this->record->suma;
            $iva_general      = $this->record->iva;

            $almacenaje       = $this->record->almacenaje;
            $custodia         = $this->record->custodia;
            $viaticos         = $this->record->viaticos;
            $transporte       = $this->record->transporte;
            $descarga         = $this->record->descarga;
            $recarga          = $this->record->recarga;
            $otros_gastos     = $this->record->otros_gastos;
            $total_general    = $this->record->total;

            foreach ($purchases as $purchase) {
                $purchase->retaceo_number = $this->record->retaceo_number;
                $purchase->retaced_status = 'Procesando';
                $purchase->save();

                $purchaseDetails = \App\Models\PurchaseItem::where('purchase_id', $purchase->id)->get();

                foreach ($purchaseDetails as $item) {
                    $itemRetaceo = new \App\Models\RetaceoItem();
                    $itemRetaceo->retaceo_id              = $this->record->id;
                    $itemRetaceo->purchase_id             = $purchase->id;
                    $itemRetaceo->purchase_item_id        = $item->id;
                    $itemRetaceo->inventory_id            = $item->inventory_id;
                    $itemRetaceo->cantidad                = $item->quantity;
                    $itemRetaceo->conf                    = $item->quantity;
                    $itemRetaceo->rec                     = 1;
                    $itemRetaceo->costo_unitario_factura  = $item->price;

                    // CÃ¡lculos
                    $itemRetaceo->fob         = $itemRetaceo->conf * $itemRetaceo->rec * $item->price;
                    $itemRetaceo->flete       = ($flete_general   * $itemRetaceo->fob) / $fob_general;
                    $itemRetaceo->seguro      = ($seguro_general  * $itemRetaceo->fob) / $fob_general;
                    $itemRetaceo->otro        = ($otros_general   * $itemRetaceo->fob) / $fob_general;
                    $itemRetaceo->cif         = $itemRetaceo->fob + $itemRetaceo->flete + $itemRetaceo->seguro + $itemRetaceo->otro;
                    $itemRetaceo->dai         = ($dai_general     * $itemRetaceo->fob) / $fob_general;
                    $itemRetaceo->cif_dai     = $itemRetaceo->cif + $itemRetaceo->dai;
                    $itemRetaceo->gasto       = ($total_general   * $itemRetaceo->fob) / $fob_general;
                    $itemRetaceo->cif_dai_gasto = $itemRetaceo->cif_dai + $itemRetaceo->gasto;
                    $itemRetaceo->precio      = $itemRetaceo->cif_dai_gasto / $itemRetaceo->cantidad;
                    $itemRetaceo->iva         =  $itemRetaceo->cif_dai * 0.13;
                    $itemRetaceo->costo       = $itemRetaceo->precio + $itemRetaceo->iva;
                    $itemRetaceo->precio_t    = $itemRetaceo->costo / $itemRetaceo->conf;
                    $itemRetaceo->estado      = '0';
                    $itemRetaceo->save();
                }
            }
        });
    }

}

